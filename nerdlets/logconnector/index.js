import React from 'react';
import LogConnector from './services/LogConnector';
import CredentialConnector from './services/CredentialConnector';
import nr1 from '../../nr1.json';
import { AccountStorageQuery } from 'nr1';

const toInputUppercase = e => {
  e.target.value = ("" + e.target.value).toUpperCase();
};

export default class LogconnectorNerdlet extends React.Component {
  constructor(props) {
    super(props);
    this.synteticMonitorSelected=null;
    this.state= {
      accountId: 2710112,
      visible: false,
      arrayStorageSyn: [],
      selected: false,
      monitorSelected: null,
      keyVault: '',
      valueVault: ''
    }
    this.getsyntetic = this.getSyntetic();
    
  }

  componentDidMount() {
    this.BoootstrapApplication();
  }

  BoootstrapApplication = async () => {
    this.LogConnector = new LogConnector();
    this.CredentialConnector = new CredentialConnector();
  };

  async getSyntetic(){
    try {
      const { data } = await AccountStorageQuery.query({
        accountId: this.state.accountId,
        collection: 'pathpoint',
        documentId: 'syntetic'
      });
      this.setState({arrayStorageSyn: data.syntetic})
    } catch (error) {
      throw new Error(error);
    }
  }

  // validar el script (que se ejecuta bien el script) buscar validacion en la docuemntacion

  // nombres: Create, Update, Delete, Validate, ScriptsList
  
  // crear actualizar y eliminar y listar para las credenciales

  // crear, actualizar, eliminar credenciales sobre el nerd storage vault y de ahi recien se pasa a las credenciales para el script
  async Create(){
    const syntetic = {
      name: "SYNTETIC 4",
      type: "SCRIPT_API",
      frequency: 5,
      uri: "http://my-uri.com",
      locations: [ "AWS_US_WEST_1" ],
      status: "ENABLED", // habilitar y desabilitar el status; crear funciones, hacer getStatus --> si esta habilitado el monitor;
      slaThreshold: 1.0
    };
    console.log('click en crear');
    await this.LogConnector.Create(syntetic);
    this.getSyntetic();
  }

  async Update(){
    const scriptUdpdate = {
      scriptText: ''+
      ''+
      'IEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV80XzU6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBjb3VudCgqKSxwZXJjZW50YWdlKGNvdW50KCopLCBXSEVSRSBlcnJvciBpcyB0cnVlKSBhcyBwZXJjZW50YWdlIEZST00gVHJhbnNhY3Rpb24gV0hFUkUgYXBwTmFtZT0ncHJkLWNibXMtdGFzaycgQU5EIHJlcXVlc3QudXJpICE9Jy9DaGVja1NlcnZsZXQuc3J2JyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzRfNjogYWNjb3VudChpZDogIitteUFjY291bnRJRCsiKSB7IG5ycWwocXVlcnk6IFwiU0VMRUNUIGNvdW50KCopLHBlcmNlbnRhZ2UoY291bnQoKiksIFdIRVJFIGVycm9yIGlzIHRydWUpIGFzIHBlcmNlbnRhZ2UgRlJPTSBUcmFuc2FjdGlvbiBXSEVSRSBhcHBOYW1lPSdwcmQtY2Jtcy1yYWJiaXQtY29uc3VtZXJzJyBBTkQgcmVxdWVzdC51cmkgIT0nL0NoZWNrU2VydmxldC5zcnYnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19IG1lYXN1cmVfNF83OiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1tYWlsLWdyaWQtc2VydmljZScgQU5EIHJlcXVlc3QudXJpICE9Jy9tb25pdG9yaW5nL2hlYWx0aCcgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV80Xzg6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBjb3VudCgqKSxwZXJjZW50YWdlKGNvdW50KCopLCBXSEVSRSBlcnJvciBpcyB0cnVlKSBhcyBwZXJjZW50YWdlIEZST00gVHJhbnNhY3Rpb24gV0hFUkUgYXBwTmFtZT0ncHJkLWZyYXVkLXNlcnZpY2UnIEFORCByZXF1ZXN0LnVyaSAhPScvc3RhdHVzJyBBTkQgcmVxdWVzdC51cmkhPScvaGVhbHRoJyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzVfMTogYWNjb3VudChpZDogIitteUFjY291bnRJRCsiKSB7IG5ycWwocXVlcnk6IFwiU0VMRUNUIGNvdW50KCopLHBlcmNlbnRhZ2UoY291bnQoKiksIFdIRVJFIGVycm9yIGlzIHRydWUpIGFzIHBlcmNlbnRhZ2UgRlJPTSBUcmFuc2FjdGlvbiBXSEVSRSBhcHBOYW1lPSdwcmQtY2Jtcy1odWInIEFORCByZXF1ZXN0LnVyaSAhPScvQ2hlY2tTZXJ2bGV0LnNydicgQU5EIHJlcXVlc3QudXJpIT0nL2NoZWNrc2VydmxldC5zcnYnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19IG1lYXN1cmVfNV8yOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1jYm1zLWF1dGgnIEFORCByZXF1ZXN0LnVyaSAhPScvQ2hlY2tTZXJ2bGV0LnNydicgQU5EIHJlcXVlc3QudXJpIT0nL2NoZWNrc2VydmxldC5zcnYnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19IG1lYXN1cmVfNV8zOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1jYm1zLWNhY2hlLWxvYWRlcicgQU5EIHJlcXVlc3QudXJpICE9Jy9DaGVja1NlcnZsZXQuc3J2JyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzVfNDogYWNjb3VudChpZDogIitteUFjY291bnRJRCsiKSB7IG5ycWwocXVlcnk6IFwiU0VMRUNUIGNvdW50KCopLHBlcmNlbnRhZ2UoY291bnQoKiksIFdIRVJFIGVycm9yIGlzIHRydWUpIGFzIHBlcmNlbnRhZ2UgRlJPTSBUcmFuc2FjdGlvbiBXSEVSRSBhcHBOYW1lPSdwcmQtc2hpcHBpbmctc2VydmljZScgQU5EIHJlcXVlc3QudXJpICE9Jy91cCcgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81XzU6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBjb3VudCgqKSxwZXJjZW50YWdlKGNvdW50KCopLCBXSEVSRSBlcnJvciBpcyB0cnVlKSBhcyBwZXJjZW50YWdlIEZST00gVHJhbnNhY3Rpb24gV0hFUkUgYXBwTmFtZT0ncHJkLXNoaXBvdXQtc2VydmljZScgQU5EIHJlcXVlc3QudXJpICE9Jy9oZWFsdGgnIEFORCByZXF1ZXN0LnVyaSE9Jy9zdGF0dXMnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19fX0iLCAidmFyaWFibGVzIjogIiIgfSk7CnZhciByYXc0ID0gSlNPTi5zdHJpbmdpZnkoeyAicXVlcnkiOiAieyBhY3RvciB7IG1lYXN1cmVfNV82OiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1zaGlwb3V0dWknIEFORCByZXF1ZXN0LnVyaSAhPScvaGVhbHRoJyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzVfNzogYWNjb3VudChpZDogIitteUFjY291bnRJRCsiKSB7IG5ycWwocXVlcnk6IFwiU0VMRUNUIGNvdW50KCopLHBlcmNlbnRhZ2UoY291bnQoKiksIFdIRVJFIGVycm9yIGlzIHRydWUpIGFzIHBlcmNlbnRhZ2UgRlJPTSBUcmFuc2FjdGlvbiBXSEVSRSBhcHBOYW1lPSdwcmQtY2Jtcy1vcmRlcnMtYXBpJyBBTkQgcmVxdWVzdC51cmkgIT0nL0NoZWNrU2VydmxldC5zcnYnIEFORCByZXF1ZXN0LnVyaSE9Jy9jaGVja3NlcnZsZXQuc3J2JyBBTkQgaHR0cFJlc3BvbnNlQ29kZSE9JzQwMCcgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81Xzg6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBjb3VudCgqKSxwZXJjZW50YWdlKGNvdW50KCopLCBXSEVSRSBlcnJvciBpcyB0cnVlKSBhcyBwZXJjZW50YWdlIEZST00gVHJhbnNhY3Rpb24gV0hFUkUgYXBwTmFtZT0ncHJkLXNjYWxlcicgQU5EIHJlcXVlc3QudXJpICE9Jy9oZWFsdGgnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19IG1lYXN1cmVfNV85OiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1tYWlsLWdyaWQtc2VydmljZScgQU5EIHJlcXVlc3QudXJpICE9Jy9tb25pdG9yaW5nL2hlYWx0aCcgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81XzEwOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1jYm1zLXRhc2snIEFORCByZXF1ZXN0LnVyaSAhPScvQ2hlY2tTZXJ2bGV0LnNydicgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81XzExOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC1jYm1zLXJhYmJpdC1jb25zdW1lcnMnIEFORCByZXF1ZXN0LnVyaSAhPScvQ2hlY2tTZXJ2bGV0LnNydicgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81XzEyOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC10cmFja2luZycgQU5EIHJlcXVlc3QudXJpICE9Jy9oZWFsdGhjaGVjaycgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV81XzEzOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgY291bnQoKikscGVyY2VudGFnZShjb3VudCgqKSwgV0hFUkUgZXJyb3IgaXMgdHJ1ZSkgYXMgcGVyY2VudGFnZSBGUk9NIFRyYW5zYWN0aW9uIFdIRVJFIGFwcE5hbWU9J3ByZC11dHVybicgQU5EIHJlcXVlc3QudXJpICE9Jy9oZWFsdGgnIEFORCBodHRwUmVzcG9uc2VDb2RlIT0nNDAwJyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzVfMTQ6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBjb3VudCgqKSxwZXJjZW50YWdlKGNvdW50KCopLCBXSEVSRSBlcnJvciBpcyB0cnVlKSBhcyBwZXJjZW50YWdlIEZST00gVHJhbnNhY3Rpb24gV0hFUkUgYXBwTmFtZT0ncHJkLWNibXMtY29uc3VsYXRlJyBBTkQgcmVxdWVzdC51cmkgIT0nL0NoZWNrU2VydmxldC5zcnYnIEFORCByZXF1ZXN0LnVyaSE9Jy9jaGVja3NlcnZsZXQuc3J2JyBTSU5DRSA1IG1pbnV0ZXMgQUdPXCIsIHRpbWVvdXQ6IDEwKSB7cmVzdWx0cyB9fSBtZWFzdXJlXzNfMTk6IGFjY291bnQoaWQ6ICIrbXlBY2NvdW50SUQrIikgeyBucnFsKHF1ZXJ5OiBcIlNFTEVDVCBGSUxURVIoY291bnQoKiksIFdIRVJFIG1lc3NhZ2UgbGlrZSAnJXJlc3BvbnNlQ29kZT1TVUNDRVNTJScpIGFzIFIxLCBGSUxURVIoY291bnQoKiksIFdIRVJFIG1lc3NhZ2UgbGlrZSAnJXJlc3BvbnNlQ29kZT1GQUlMRUQlJykgYXMgUjIgRlJPTSBMb2cgV0hFUkUgbWVzc2FnZSBsaWtlICclY29tLmJvcmRlcmZyZWUudmNhcmRzLnRoaXJkcGFydHkud2V4JScgU0lOQ0UgNSBtaW51dGVzIEFHT1wiLCB0aW1lb3V0OiAxMCkge3Jlc3VsdHMgfX0gbWVhc3VyZV8zXzIwOiBhY2NvdW50KGlkOiAiK215QWNjb3VudElEKyIpIHsgbnJxbChxdWVyeTogXCJTRUxFQ1QgRklMVEVSKGNvdW50KCopLCBXSEVSRSBkYXRhLnJlcXVlc3QuZGV0YWlsZWRfcmVzdWx0PScxJykgYXMgUjEsIEZJTFRFUihjb3VudCgqKSwgV0hFUkUgZGF0YS5yZXF1ZXN0LmRldGFpbGVkX3Jlc3VsdD0nMCcpIGFzIFIyIEZST00gTG9nIFdIRVJFIHNlcnZpY2VfbmFtZT0ncHJkL2R1dHljYWxjLXNlcnZpY2UnIFNJTkNFIDUgbWludXRlcyBBR09cIiwgdGltZW91dDogMTApIHtyZXN1bHRzIH19fX0iLCAidmFyaWFibGVzIjogIiIgfSk7CgovL2NvbnNvbGUubG9nKHJhdyk7CnZhciBncmFwaHFscGFjazEgPSB7CiAgICBoZWFkZXJzOiB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiQVBJLUtleSI6IGdyYXBoUUxLZXkKICAgIH0sCiAgICB1cmw6ICdodHRwczovL2FwaS5uZXdyZWxpYy5jb20vZ3JhcGhxbCcsCiAgICBib2R5OiByYXcxCgp9Owp2YXIgZ3JhcGhxbHBhY2syID0gewogICAgaGVhZGVyczogewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgIkFQSS1LZXkiOiBncmFwaFFMS2V5CiAgICB9LAogICAgdXJsOiAnaHR0cHM6Ly9hcGkubmV3cmVsaWMuY29tL2dyYXBocWwnLAogICAgYm9keTogcmF3MgoKfTsKdmFyIGdyYXBocWxwYWNrMyA9IHsKICAgIGhlYWRlcnM6IHsKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICJBUEktS2V5IjogZ3JhcGhRTEtleQogICAgfSwKICAgIHVybDogJ2h0dHBzOi8vYXBpLm5ld3JlbGljLmNvbS9ncmFwaHFsJywKICAgIGJvZHk6IHJhdzMKCn07CnZhciBncmFwaHFscGFjazQgPSB7CiAgICBoZWFkZXJzOiB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAiQVBJLUtleSI6IGdyYXBoUUxLZXkKICAgIH0sCiAgICB1cmw6ICdodHRwczovL2FwaS5uZXdyZWxpYy5jb20vZ3JhcGhxbCcsCiAgICBib2R5OiByYXc0Cgp9Owp2YXIgcmV0dXJuMSA9IG51bGw7CnZhciByZXR1cm4yID0gbnVsbDsKdmFyIHJldHVybjMgPSBudWxsOwp2YXIgcmV0dXJuNCA9IG51bGw7CgpmdW5jdGlvbiBjYWxsYmFjazEoZXJyLCByZXNwb25zZSwgYm9keSkgewogICAgcmV0dXJuMSA9IEpTT04ucGFyc2UoYm9keSk7CiAgICAkaHR0cC5wb3N0KGdyYXBocWxwYWNrMiwgY2FsbGJhY2syKTsKfQoKZnVuY3Rpb24gY2FsbGJhY2syKGVyciwgcmVzcG9uc2UsIGJvZHkpIHsKICAgIHJldHVybjIgPSBKU09OLnBhcnNlKGJvZHkpOwogICAgJGh0dHAucG9zdChncmFwaHFscGFjazMsIGNhbGxiYWNrMyk7Cn0KCmZ1bmN0aW9uIGNhbGxiYWNrMyhlcnIsIHJlc3BvbnNlLCBib2R5KSB7CiAgICByZXR1cm4zID0gSlNPTi5wYXJzZShib2R5KTsKICAgICRodHRwLnBvc3QoZ3JhcGhxbHBhY2s0LCBjYWxsYmFjazQpOwp9CgpmdW5jdGlvbiBjYWxsYmFjazQoZXJyLCByZXNwb25zZSwgYm9keSkgewogICAgcmV0dXJuNCA9IEpTT04ucGFyc2UoYm9keSk7CiAgICB2YXIgZXZlbnRzID0gW107CiAgICB2YXIgZXZlbnQgPSBudWxsOwogICAgdmFyIGMgPSBudWxsOwogICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmV0dXJuMS5kYXRhLmFjdG9yKSkgewogICAgICAgIGMgPSBrZXkuc3BsaXQoIl8iKTsKICAgICAgICBpZiAodmFsdWUubnJxbC5yZXN1bHRzICE9IG51bGwpIHsKICAgICAgICAgICAgZXZlbnQgPSB7CiAgICAgICAgICAgICAgICAiZXZlbnRUeXBlIjogIlBhdGhwb2ludEhpc3RvcmljRXJyb3JzIiwKICAgICAgICAgICAgICAgICJzdGFnZV9pbmRleCI6IHBhcnNlSW50KGNbMV0pLAogICAgICAgICAgICAgICAgInRvdWNocG9pbnRfaW5kZXgiOiBwYXJzZUludChjWzJdKSwKICAgICAgICAgICAgICAgICJjb3VudCI6IHZhbHVlLm5ycWwucmVzdWx0c1swXS5jb3VudCwKICAgICAgICAgICAgICAgICJwZXJjZW50YWdlIjogdmFsdWUubnJxbC5yZXN1bHRzWzBdLnBlcmNlbnRhZ2UKICAg'+
      'ICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7CiAgICAgICAgICAgIGV2ZW50cy5wdXNoKGV2ZW50KTsKICAgICAgICB9CiAgICB9CiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZXR1cm4yLmRhdGEuYWN0b3IpKSB7CiAgICAgICAgYyA9IGtleS5zcGxpdCgiXyIpOwogICAgICAgIGlmICh2YWx1ZS5ucnFsLnJlc3VsdHMgIT0gbnVsbCkgewogICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICAgICJldmVudFR5cGUiOiAiUGF0aHBvaW50SGlzdG9yaWNFcnJvcnMiLAogICAgICAgICAgICAgICAgInN0YWdlX2luZGV4IjogcGFyc2VJbnQoY1sxXSksCiAgICAgICAgICAgICAgICAidG91Y2hwb2ludF9pbmRleCI6IHBhcnNlSW50KGNbMl0pLAogICAgICAgICAgICAgICAgImNvdW50IjogdmFsdWUubnJxbC5yZXN1bHRzWzBdLmNvdW50LAogICAgICAgICAgICAgICAgInBlcmNlbnRhZ2UiOiB2YWx1ZS5ucnFsLnJlc3VsdHNbMF0ucGVyY2VudGFnZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTsKICAgICAgICAgICAgZXZlbnRzLnB1c2goZXZlbnQpOwogICAgICAgIH0KICAgIH0KICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJldHVybjMuZGF0YS5hY3RvcikpIHsKICAgICAgICBjID0ga2V5LnNwbGl0KCJfIik7CiAgICAgICAgaWYgKHZhbHVlLm5ycWwucmVzdWx0cyAhPSBudWxsKSB7CiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgICAgImV2ZW50VHlwZSI6ICJQYXRocG9pbnRIaXN0b3JpY0Vycm9ycyIsCiAgICAgICAgICAgICAgICAic3RhZ2VfaW5kZXgiOiBwYXJzZUludChjWzFdKSwKICAgICAgICAgICAgICAgICJ0b3VjaHBvaW50X2luZGV4IjogcGFyc2VJbnQoY1syXSksCiAgICAgICAgICAgICAgICAiY291bnQiOiB2YWx1ZS5ucnFsLnJlc3VsdHNbMF0uY291bnQsCiAgICAgICAgICAgICAgICAicGVyY2VudGFnZSI6IHZhbHVlLm5ycWwucmVzdWx0c1swXS5wZXJjZW50YWdlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQpOwogICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7CiAgICAgICAgfQogICAgfQogICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmV0dXJuNC5kYXRhLmFjdG9yKSkgewogICAgICAgIGMgPSBrZXkuc3BsaXQoIl8iKTsKICAgICAgICBpZiAodmFsdWUubnJxbC5yZXN1bHRzICE9IG51bGwpIHsKICAgICAgICAgICAgaWYgKGtleSA9PSAnbWVhc3VyZV8zXzE5JyB8fCBrZXkgPT0gJ21lYXN1cmVfM18yMCcpIHsKICAgICAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgICAgICAgICJldmVudFR5cGUiOiAiUGF0aHBvaW50SGlzdG9yaWNFcnJvcnMiLAogICAgICAgICAgICAgICAgICAgICJzdGFnZV9pbmRleCI6IHBhcnNlSW50KGNbMV0pLAogICAgICAgICAgICAgICAgICAgICJ0b3VjaHBvaW50X2luZGV4IjogcGFyc2VJbnQoY1syXSksCiAgICAgICAgICAgICAgICAgICAgImNvdW50IjogdmFsdWUubnJxbC5yZXN1bHRzWzBdLlIxLAogICAgICAgICAgICAgICAgICAgICJwZXJjZW50YWdlIjogdmFsdWUubnJxbC5yZXN1bHRzWzBdLlIyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBldmVudCA9IHsKICAgICAgICAgICAgICAgICAgICAiZXZlbnRUeXBlIjogIlBhdGhwb2ludEhpc3RvcmljRXJyb3JzIiwKICAgICAgICAgICAgICAgICAgICAic3RhZ2VfaW5kZXgiOiBwYXJzZUludChjWzFdKSwKICAgICAgICAgICAgICAgICAgICAidG91Y2hwb2ludF9pbmRleCI6IHBhcnNlSW50KGNbMl0pLAogICAgICAgICAgICAgICAgICAgICJjb3VudCI6IHZhbHVlLm5ycWwucmVzdWx0c1swXS5jb3VudCwKICAgICAgICAgICAgICAgICAgICAicGVyY2VudGFnZSI6IHZhbHVlLm5ycWwucmVzdWx0c1swXS5wZXJjZW50YWdlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQpOwogICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7CiAgICAgICAgfQogICAgfQoKICAgIHZhciByYXc1ID0gSlNPTi5zdHJpbmdpZnkoZXZlbnRzKTsKICAgIHZhciBvcHRpb25zID0gewogICAgICAgIC8vRGVmaW5lIGVuZHBvaW50IFVSTC4KICAgICAgICB1cmw6ICJodHRwczovL2luc2lnaHRzLWNvbGxlY3Rvci5uZXdyZWxpYy5jb20vdjEvYWNjb3VudHMvIiArIG15QWNjb3VudElEICsgIi9ldmVudHMiLAogICAgICAgIC8vRGVmaW5lIGJvZHkgb2YgUE9TVCByZXF1ZXN0LgogICAgICAgIGJvZHk6IHJhdzUsCiAgICAgICAgLy9EZWZpbmUgaW5zZXJ0IGtleSBhbmQgZXhwZWN0ZWQgZGF0YSB0eXBlLgogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgJ1gtSW5zZXJ0LUtleSc6IG15SW5zZXJ0S2V5LAogICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgfQogICAgfTsKICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpOwogICAgJGh0dHAucG9zdChvcHRpb25zLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3BvbnNlLCBib2R5KSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2Uuc3RhdHVzQ29kZSArICIgc3RhdHVzIGNvZGUgRlVOQ0lPTk8iKTsKICAgICAgICB2YXIgaW5mbyA9IEpTT04ucGFyc2UoYm9keSk7CiAgICAgICAgY29uc29sZS5sb2coaW5mbyk7CiAgICB9KTsKfQovL01ha2UgR0VUIHJlcXVlc3QsIHBhc3NpbmcgaW4gb3B0aW9ucyBhbmQgY2FsbGJhY2suCiRodHRwLnBvc3QoZ3JhcGhxbHBhY2sxLCBjYWxsYmFjazEpOwoK'
    }
    console.log('llego update')
    const monitorId = this.synteticMonitorSelected.monitorId;
    await this.LogConnector.updateScript(monitorId, scriptUdpdate);
  }

  async Delete(){
    const monitorId = this.synteticMonitorSelected.monitorId;
    await this.LogConnector.Delete(monitorId);
    this.getSyntetic();
  }

  ScriptsList(){

  }

  async setMonitor(syntetic){
    const arraynew=[];
    arraynew.push(syntetic);
    this.setState({arrayStorageSyn:arraynew, selected: true});
    this.synteticMonitorSelected = syntetic;
    await this.GetMonitor(syntetic.monitorId);
    
  }

  async GetMonitor(monitorId){
    const monitor = await this.LogConnector.getMonitor(monitorId);
    this.setState({monitorSelected: monitor});
    console.log('monitorSelected',this.state.monitorSelected)
  }

  async UpdateMonitor(monitorSelected){
    if (monitorSelected.status === 'ENABLED'){
      let monitor = {
        name: monitorSelected.name,
        type: monitorSelected.type,
        frequency: monitorSelected.frequency,
        uri: monitorSelected.uri,
        locations: monitorSelected.locations,
        status: "DISABLED",
        slaThreshold: monitorSelected.slaThreshold
      }
      await this.LogConnector.updateMonitor(monitorSelected.id, monitor);
      this.setState({selected: false, monitorSelected: null});
      this.getSyntetic();
    }
    else {
      let monitor = {
        name: monitorSelected.name,
        type: monitorSelected.type,
        frequency: monitorSelected.frequency,
        uri: monitorSelected.uri,
        locations: monitorSelected.locations,
        status: "ENABLED",
        slaThreshold: monitorSelected.slaThreshold
      }
      await this.LogConnector.updateMonitor(monitorSelected.id, monitor);
      this.setState({selected: false, monitorSelected: null});
      this.getSyntetic();
    }
  }

  // ================================= CREDENCIALES PARA EL SCRIPT DEL SYNTETIC =======================================
  CreateCredential(){
    const credential = {
      key: "INGESTKEY",
      value: "458796531",
      description: "key for ingest grapQL querires"
    };
    console.log('click en crear credential');
    this.CredentialConnector.createCredential(credential);
  }

  UpdateCredential(){
    const credential = {
      key: 'INGESTKEY',
      value: "458796531",
      description: "key for ingest grapQL queries after update"
    };
    this.CredentialConnector.updateCredential(credential);
  }

  DeleteCredential(){
    const credential = {
      key: 'INGESTKEY'
    };
    this.CredentialConnector.deleteCredential(credential);
  }
  // ==================================================================================================================
  
  updateInputKey(evt) {
    // this.setState({
    //   inputValue: evt.target.value
    // });
    console.log('datos ingresados', evt.target.value);
    this.setState({keyVault: evt.target.value});
  }

  updateInputValue(evt) {
    // this.setState({
    //   inputValue: evt.target.value
    // });
    console.log('datos ingresados value', evt.target.value);
    this.setState({valueVault: evt.target.value});
  }

  render() {
    const {arrayStorageSyn, selected,  monitorSelected} = this.state;
    return (
      <div>
        <h1>Hello, logconnector Nerdlet!</h1>
        <div 
          style={{
            display: 'flex',
            marginTop: '20px'
          }}
        >
          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.Create();
            }}
          >
            Crear monitor
          </div>
          
          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.Update();
            }}
          >
            Actualizar mon
          </div>

          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.Delete();
            }}
          >
            Eliminar monitor
          </div>

          <div>
            <p style= {{marginLeft: '20px'}}>Lista de monitores creados</p>
            <div
              style={{
                display: 'flex',
                flexDirection: 'column',
                marginLeft: '20px',
                height: '100px',
                width: '200px',
                justifyContent: 'center',
                alignItems: 'center',
                border: '3px solid rgba(0, 0, 0, 0.05)'
              }}
            >
              {arrayStorageSyn.map((syntetic) => {
                  return (
                    <label
                      key={syntetic.monitorId}
                      onClick={() => this.setMonitor(syntetic)}
                    >
                      {syntetic.name}
                    </label>
                  )
                  
                })
              }
            </div>
          </div>

          {selected === true ? 
              monitorSelected !== null ? 
                monitorSelected.status === 'ENABLED'?
                  <div
                    style={{
                      display: 'flex',
                      cursor: 'pointer',
                      marginLeft: '20px',
                      height: '30px',
                      width: '100px',
                      justifyContent: 'center',
                      alignItems: 'center',
                      border: '3px solid rgba(0, 0, 0, 0.05)'
                    }}
                    onClick={() => {
                      this.UpdateMonitor(monitorSelected);
                    }}
                  >
                    DISABLED
                  </div>: 
                  <div
                    style={{
                      display: 'flex',
                      cursor: 'pointer',
                      marginLeft: '20px',
                      height: '30px',
                      width: '100px',
                      justifyContent: 'center',
                      alignItems: 'center',
                      border: '3px solid rgba(0, 0, 0, 0.05)'
                    }}
                    onClick={() => {
                      this.UpdateMonitor(monitorSelected);
                    }}
                  >
                    ENABLED
                  </div>
                :null
              : null
          }
          
        </div>

        <div style={{marginTop: '30px'}}>Operaciones para credenciales de Syntetic</div>
        <div 
          style={{
            display: 'flex',
            marginTop: '10px'
          }}
        >
          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.CreateCredential();
            }}
          >
            Crear credencial
          </div>
          
          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.UpdateCredential();
            }}
          >
            Actualizar credencial
          </div>

          <div
            style={{
              display: 'flex',
              cursor: 'pointer',
              marginLeft: '20px',
              height: '30px',
              width: '100px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '3px solid rgba(0, 0, 0, 0.05)'
            }}
            onClick={() => {
              this.DeleteCredential();
            }}
          >
            Eliminar credencial
          </div>
        </div>

        <div style={{marginTop: '30px'}}>Operaciones sobre NerdStorage vault</div>
        <div 
          style={{
            display: 'flex',
            marginTop: '10px'
          }}
        >
          <div style={{
              display: 'flex',
              marginLeft: '20px',
              height: '30px',
              width: '150px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '2px solid rgba(0, 0, 0, 0.05)'
            }}>
              <input style={{height:'30px', background:'white'}} onBlur={evt => this.updateInputKey(evt)} onInput={toInputUppercase} placeholder="Ingrese key"/>
            </div>

            <div style={{
              display: 'flex',
              marginLeft: '20px',
              height: '30px',
              width: '150px',
              justifyContent: 'center',
              alignItems: 'center',
              border: '2px solid rgba(0, 0, 0, 0.05)'
            }}>
              <input style={{height:'30px', background:'white'}} onBlur={evt => this.updateInputValue(evt)} placeholder="Ingrese value"/>
            </div>
            <div
              style={{
                display: 'flex',
                cursor: 'pointer',
                marginLeft: '20px',
                height: '30px',
                width: '100px',
                justifyContent: 'center',
                alignItems: 'center',
                border: '3px solid rgba(0, 0, 0, 0.05)'
              }}
            >
              Crear
            </div>
        </div>
      </div>
    );
  }
}
